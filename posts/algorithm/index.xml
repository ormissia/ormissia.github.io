<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>算法 on Ormissia's Blog</title><link>https://ormissia.github.io/posts/algorithm/</link><description>Recent content in 算法 on Ormissia's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 12 Aug 2021 15:26:23 +0800</lastBuildDate><atom:link href="https://ormissia.github.io/posts/algorithm/index.xml" rel="self" type="application/rss+xml"/><item><title>前缀树</title><link>https://ormissia.github.io/posts/algorithm/4002-algorithm-trie/</link><pubDate>Thu, 12 Aug 2021 15:26:23 +0800</pubDate><guid>https://ormissia.github.io/posts/algorithm/4002-algorithm-trie/</guid><description> 前缀树又称字典树
Trie的应用 自动补全,例如：在百度搜索的输入框中,输入一个单词的前半部分,能够自动补全出可能的单词结果。 拼写检查，例如：在word中输入一个拼写错误的单词, 能够自动检测出来。 IP路由表，在IP路由表中进行路由匹配时, 要按照最长匹配前缀的原则进行匹配。 T9预测文本，在大多手机输入法中, 都会用9格的那种输入法. 这个输入法能够根据用户在9格上的输入,自动匹配出可能的单词。 填单词游戏，相信大多数人都玩过那种在横竖的格子里填单词的游戏。</description></item><item><title>排序算法</title><link>https://ormissia.github.io/posts/algorithm/4001-algorithm-sort/</link><pubDate>Sat, 07 Aug 2021 12:52:56 +0800</pubDate><guid>https://ormissia.github.io/posts/algorithm/4001-algorithm-sort/</guid><description>归并排序 思想 整体是递归（当然可以用非递归实现），使左边有序，使右边有序，合并左边右边使整体有序
具体实现
核心代码 func merge(arr []interface{}, l, mid, r int, compare Compare) { help := make([]interface{}, r-l+1) i := 0 p1 := l p2 := mid + 1 for p1 &amp;lt;= mid &amp;amp;&amp;amp; p2 &amp;lt;= r { if compare(arr[p1], arr[p2]) { help[i] = arr[p1] p1++ } else { help[i] = arr[p2] p2++ } i++ } //要么p1越界了，要么p2越界了 for p1 &amp;lt;= mid { help[i] = arr[p1] i++ p1++ } for p2 &amp;lt;= r { help[i] = arr[p2] i++ p2++ } for j, _ := range help { arr[l+j] = help[j] } } 递归 核心代码</description></item></channel></rss>