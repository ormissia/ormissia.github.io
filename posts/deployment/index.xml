<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>环境部署 on Ormissia's Blog</title><link>https://ormissia.github.io/posts/deployment/</link><description>Recent content in 环境部署 on Ormissia's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 13 Jan 2022 15:37:06 +0800</lastBuildDate><atom:link href="https://ormissia.github.io/posts/deployment/index.xml" rel="self" type="application/rss+xml"/><item><title>Redis默认配置文件修改</title><link>https://ormissia.github.io/posts/deployment/3008-linux-redis/</link><pubDate>Thu, 13 Jan 2022 15:37:06 +0800</pubDate><guid>https://ormissia.github.io/posts/deployment/3008-linux-redis/</guid><description>与MySQL类似，Redis安装完也不能直接使用，默认的配置文件有几处需要修改
使用yum安装的Redis默认配置文件路径：/etc/redis.conf
允许访问地址 # bind 127.0.0.1 将只限本地访问的配置注释掉
修改保护模式 protected-mode no 将保护模式修改为no
启用守护进程 daemonize yes 将守护进程设置为yes</description></item><item><title>Linux部署Kubernetes流程</title><link>https://ormissia.github.io/posts/deployment/3007-linux-kubernetes/</link><pubDate>Thu, 14 Oct 2021 18:09:43 +0800</pubDate><guid>https://ormissia.github.io/posts/deployment/3007-linux-kubernetes/</guid><description>此次安装的平台是基于ARM架构的RedHat系Linux系统平台，参照Kubernetes官方文档进行的。
本文档流程与X86架构的没有区别，官方文档中个别步骤中的命令需要区分所使用的包对应的平台。
初始化环境 防火墙 systemctl stop firewalld.service systemctl disable firewalld.service SELinux vi /etc/selinux/config SELINUX=disabled Swap vi /etc/fstab 注释掉swap这一行
/.swapfile none swap sw,comment=cloudconfig 0 0 重启之后查看关闭是否成功
free -m 显示如下内容，swap关闭成功
total used free shared buff/cache available Mem: 23114 402 22299 32 411 20597 Swap: 0 0 0 ulimit echo &amp;#34;ulimit -n 65535&amp;#34; &amp;gt;&amp;gt; /etc/profile echo &amp;#34;* hard nofile 65535&amp;#34; &amp;gt;&amp;gt; /etc/security/limits.conf 重启之后检查是否配置成功
ulimit -n SSH免密（非必须） 执行命令，一路回车，即可获得当前节点的公钥
ssh-keygen -t rsa cat id_rsa.</description></item><item><title>ELK部署流程</title><link>https://ormissia.github.io/posts/deployment/3006-linux-elk/</link><pubDate>Wed, 13 Oct 2021 15:28:13 +0800</pubDate><guid>https://ormissia.github.io/posts/deployment/3006-linux-elk/</guid><description>Elasticsearch Deployment&amp;amp;Service apiVersion: apps/v1 kind: StatefulSet metadata: labels: app: elasticsearch role: master name: elasticsearch-master spec: replicas: 3 revisionHistoryLimit: 10 selector: matchLabels: app: elasticsearch role: master serviceName: es-master template: metadata: labels: app: elasticsearch role: master spec: serviceAccountName: elasticsearch-admin affinity: podAntiAffinity: requiredDuringSchedulingIgnoredDuringExecution: - topologyKey: kubernetes.io/hostname labelSelector: matchExpressions: - key: role operator: In values: - master containers: - name: elasticsearch-master image: elasticsearch:7.14.2 lifecycle: postStart: exec: command: [ &amp;#34;/bin/bash&amp;#34;, &amp;#34;-c&amp;#34;, &amp;#34;sysctl -w vm.max_map_count=262144; ulimit -l unlimited; chown -R elasticsearch:elasticsearch /usr/share/elasticsearch/data;&amp;#34; ] ports: - containerPort: 9200 protocol: TCP - containerPort: 9300 protocol: TCP resources: limits: cpu: 100m memory: 1Gi requests: cpu: 10m memory: 512Mi env: - name: MY_POD_NAME valueFrom: fieldRef: fieldPath: metadata.</description></item><item><title>Prometheus部署流程</title><link>https://ormissia.github.io/posts/deployment/3005-linux-prometheus/</link><pubDate>Sat, 09 Oct 2021 20:46:05 +0800</pubDate><guid>https://ormissia.github.io/posts/deployment/3005-linux-prometheus/</guid><description>程序下载 wget https://github.com/prometheus/prometheus/releases/download/v2.30.3/prometheus-2.30.3.linux-amd64.tar.gz 解压并移动 tar -zxvf prometheus-2.30.3.linux-amd64.tar.gz mv prometheus-2.30.3.linux-amd64 /usr/local/prometheus 添加到系统服务 Unit配置文件 vi /usr/lib/systemd/system/prometheus.service [Unit] Description=Prometheus Documentation=https://prometheus.io [Service] Type=simple ExecStart=/usr/local/prometheus/prometheus \ --config.file=/usr/local/prometheus/prometheus.yml \ --storage.tsdb.path=/usr/local/prometheus/data Restart=on-failure WatchdogSec=10s [Install] WantedBy=multi-user.target 启动程序 sudo systemctl daemon-reload sudo systemctl start prometheus.service sudo systemctl status prometheus.service 开机自启 sudo systemctl enable prometheus.service 简单使用 Prometheus默认端口是9090，程序启动之后从浏览器访问页面。
输入以下表达式来绘制在自抓取Prometheus中发生的每秒HTTP请求率返回状态代码200的图表：
rate(promhttp_metric_handler_requests_total{code=&amp;#34;200&amp;#34;}[1m]) 配置文件 重新加载 curl -X POST http://127.0.0.1:9090/-/reload Kubernetes部署脚本 Deployment&amp;amp;Service apiVersion: apps/v1 kind: Deployment metadata: name: prometheus labels: app: prometheus spec: replicas: 1 strategy: rollingUpdate: maxSurge: 1 maxUnavailable: 1 type: RollingUpdate selector: matchLabels: app: prometheus template: metadata: labels: app: prometheus spec: initContainers: - name: prometheus-data-permission-setup image: busybox command: [&amp;#34;/bin/chmod&amp;#34;,&amp;#34;-R&amp;#34;,&amp;#34;777&amp;#34;, &amp;#34;/data&amp;#34;] volumeMounts: - name: prometheus-data mountPath: /data containers: - name: prometheus image: prom/prometheus args: - &amp;#39;--storage.</description></item><item><title>Grafana部署流程</title><link>https://ormissia.github.io/posts/deployment/3004-linux-grafana/</link><pubDate>Sat, 09 Oct 2021 20:45:54 +0800</pubDate><guid>https://ormissia.github.io/posts/deployment/3004-linux-grafana/</guid><description>Grafana的安装比较简单，打开官网下载页面，选择对应的系统以及需要的版本号，按照指引执行命令即可。
程序下载 wget https://dl.grafana.com/enterprise/release/grafana-enterprise-8.2.0-1.x86_64.rpm sudo yum install grafana-enterprise-8.2.0-1.x86_64.rpm 启动程序 sudo systemctl daemon-reload sudo systemctl start grafana-server sudo systemctl status grafana-server 验证 Grafana默认端口为:3000，默认用户名密码均为admin，程序启动后即可通过3000端口访问管理页面。
开机自启 sudo systemctl enable grafana-server Kubernetes部署脚本 Deployment&amp;amp;Service apiVersion: apps/v1 kind: Deployment metadata: name: grafana labels: app: grafana spec: selector: matchLabels: app: grafana template: metadata: labels: app: grafana spec: affinity: podAntiAffinity: preferredDuringSchedulingIgnoredDuringExecution: - podAffinityTerm: topologyKey: kubernetes.io/hostname labelSelector: matchExpressions: - key: role operator: In values: - data weight: 100 containers: - name: grafana image: grafana/grafana-enterprise ports: - containerPort: 3000 env: - name: GF_PATHS_CONFIG value: /etc/grafana/grafana.</description></item><item><title>Traefik部署流程</title><link>https://ormissia.github.io/posts/deployment/3003-linux-traefik/</link><pubDate>Sat, 09 Oct 2021 20:42:33 +0800</pubDate><guid>https://ormissia.github.io/posts/deployment/3003-linux-traefik/</guid><description>Traefik is an open-source Edge Router that makes publishing your services a fun and easy experience. It receives requests on behalf of your system and finds out which components are responsible for handling them. What sets Traefik apart, besides its many features, is that it automatically discovers the right configuration for your services. The magic happens when Traefik inspects your infrastructure, where it finds relevant information and discovers which service serves which request.</description></item><item><title>Linux部署Nginx流程</title><link>https://ormissia.github.io/posts/deployment/3002-linux-nginx/</link><pubDate>Fri, 08 Oct 2021 14:18:39 +0800</pubDate><guid>https://ormissia.github.io/posts/deployment/3002-linux-nginx/</guid><description>安装依赖 编译工具及库文件 yum -y install make zlib zlib-devel gcc-c++ libtool openssl openssl-devel 安装PCRE PCRE作用是让Nginx支持Rewrite功能
PCRE安装包下载地址： https://sourceforge.net/projects/pcre/files/pcre/
选择对应版本下载即可
下载PCRE安装包 cd /usr/local/src/ wget http://downloads.sourceforge.net/project/pcre/pcre/8.45/pcre-8.45.tar.gz 解压安装包并进入目录 tar -zxvf pcre-8.45.tar.gz cd pcre-8.45 编译安装 ./configure make &amp;amp;&amp;amp; make install 验证安装 pcre-config --version 可能遇到的问题 安装完成之后有可能找不到命令，查看编译安装时的默认安装目录，将其添加到Linux环境变量PATH即可
创建管理Nginx的用户和组 创建nginx运行用户nginx并加入到nginx组，不允许nginx用户直接登录系统
groupadd nginx useradd -g nginx nginx -s /sbin/nologin 安装Nginx 下载安装包 Nginx下载地址： http://nginx.org/en/download.html
没有特殊需求的话，选择Stable version稳定版下载即可
cd /usr/local/src/ wget http://nginx.org/download/nginx-1.20.1.tar.gz 解压安装包并进入目录 tar -zxvf nginx-1.20.1 cd nginx-1.20.1 编译安装 .</description></item><item><title>我的博客后端Docker镜像打包自动部署流程</title><link>https://ormissia.github.io/posts/deployment/3001-blog-cicd/</link><pubDate>Wed, 03 Mar 2021 18:00:20 +0600</pubDate><guid>https://ormissia.github.io/posts/deployment/3001-blog-cicd/</guid><description>博客后端使用Golang重构之后使用GitHub-DockerHub-Jenkins自动打包部署流程
虽然说Golang打包生成的是二进制可执行文件，不需要像JAVA一样部署环境变量，但依然也是需要打包的流程。由于考虑到在不(hen)久(yuan)的将来可能做成简单的微服务程序，又要使用Docker部署，所以在这就直接使用Docker镜像的方式来部署运行。
本地代码→GitHub 这一步是通过git commit-git push或是直接使用IDE将代码托管到GitHub上。 在这一步的同时需要编写Dockerfile文件，用来指定Docker镜像打包时的各种参数
# Go程序编译之后会得到一个可执行的二进制文件，其实在最终的镜像中是不需要go编译器的，也就是说我们只需要一个运行最终二进制文件的容器即可。# 作为别名为&amp;#34;builder&amp;#34;的编译镜像，下面会用到FROMgolang AS builder# 为镜像设置必要的环境变量ENV GO111MODULE=on \ CGO_ENABLED=0 \ GOOS=linux \ GOARCH=amd64 \ GOPROXY=https://goproxy.cn# 设置工作目录：/buildWORKDIR/build# 复制项目中的 go.mod 和 go.sum文件并下载依赖信息COPY go.mod .COPY go.sum .RUN go mod download# 将代码复制到容器中COPY 2021-03-04T18:02:29 .# 将代码编译成二进制可执行文件appRUN go build -o go-blog-app .#################### 接下来创建一个小镜像###################FROMscratch# 设置程序运行时必要的环境变量，包括监听端口、数据库配置等等ENV SERVER_PORT=8085 \ DATASOURCE_DRIVERNAME=mysql \ DATASOURCE_HOST=192.168.13.110 \ DATASOURCE_PORT=3306 \ DATASOURCE_DATABASE=blog \ DATASOURCE_USERNAME=root \ DATASOURCE_PASSWORD=5KvA82*Ziq \ DATASOURCE_CHARSET=utf8mb4# 从builder镜像中把/dist/app 拷贝到当前目录COPY --from=builder /build/go-blog-app /# 声明服务端口EXPOSE8085# 启动容器时运行的命令ENTRYPOINT [&amp;#34;/go-blog-app&amp;#34;]GitHub→Docker Hub 这一步是将GitHub上的代码打包成Docker镜像并将镜像托管到Docker Hub上，我在这里使用的是使用Docker Hub来自动打包Docker镜像。也有另一种方式是GitHub通过设置好的Webhooks来通知Jenkins等CI/CD工具来拉取代码在自己的服务器上打包Docker镜像再上传到Docker Hub或是其他Docker镜像管理工具上，由于自己的这个项目代码更新比较慢，可以容忍提交代码之后有较长的时间来更新到线上环境中，所以就采用了Docker官方的打包功能。</description></item></channel></rss>